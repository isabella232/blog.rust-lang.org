<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1200" height="262" onload="init(evt)" version="1.1" viewBox="0 0 1200 262"><defs><linearGradient id="background" x1="0" x2="0" y1="0" y2="1"><stop offset="5%" stop-color="#eee"/><stop offset="95%" stop-color="#eeeeb0"/></linearGradient></defs><style type="text/css">text { font-family:&quot;Verdana&quot;; font-size:12px; fill:rgb(0,0,0); } #title { text-anchor:middle; font-size:17px; } #search { opacity:0.1; cursor:pointer; } #search:hover, #search.show { opacity:1; } #subtitle { text-anchor:middle; font-color:rgb(160,160,160); } #unzoom { cursor:pointer; } #frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; } .hide { display:none; } .parent { opacity:0.5; }</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect width="100%" height="262" x="0" y="0" fill="url(#background)"/><text id="title" x="50%" y="24">Flame Graph</text><text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text><text id="search" x="1090" y="24">Search</text><svg id="frames" width="1180" x="10"><g><title>mir_borrowck (18,228,971 samples, 0.16%)</title><rect width=".159%" height="15" x="1.942%" y="133" fill="#E30007"/></g><g><title>is_freeze_raw (22,543,989 samples, 0.20%)</title><rect width=".197%" height="15" x="2.431%" y="85" fill="#D90018"/></g><g><title>evaluate_obligation (15,619,755 samples, 0.14%)</title><rect width=".137%" height="15" x="2.491%" y="69" fill="#DDC136"/></g><g><title>is_copy_raw (11,460,926 samples, 0.10%)</title><rect width=".1%" height="15" x="3.872%" y="53" fill="#F8D406"/></g><g><title>needs_drop_raw (21,529,709 samples, 0.19%)</title><rect width=".188%" height="15" x="3.826%" y="69" fill="#D04423"/></g><g><title>mir_built (160,164,161 samples, 1.40%)</title><rect width="1.4%" height="15" x="2.628%" y="85" fill="#E88000"/></g><g><title>mir_const (215,178,469 samples, 1.88%)</title><rect width="1.881%" height="15" x="2.241%" y="117" fill="#CFA02F"/><text x="2.491%" y="127.5">m..</text></g><g><title>unsafety_check_result (204,635,053 samples, 1.79%)</title><rect width="1.789%" height="15" x="2.334%" y="101" fill="#E41722"/><text x="2.584%" y="111.5">u..</text></g><g><title>mir_validated (235,295,886 samples, 2.06%)</title><rect width="2.057%" height="15" x="2.102%" y="133" fill="#DA1E1A"/><text x="2.352%" y="143.5">m..</text></g><g><title>type_op_prove_predicate (30,501,338 samples, 0.27%)</title><rect width=".267%" height="15" x="4.33%" y="133" fill="#DC7A13"/></g><g><title>MIR_borrow_checking (524,702,964 samples, 4.59%)</title><rect width="4.586%" height="15" x=".011%" y="165" fill="#FAE42A"/><text x=".261%" y="175.5">MIR_b..</text></g><g><title>mir_borrowck (522,615,259 samples, 4.57%)</title><rect width="4.568%" height="15" x=".029%" y="149" fill="#F0C11C"/><text x=".279%" y="159.5">mir_b..</text></g><g><title>misc_checking_1 (13,523,529 samples, 0.12%)</title><rect width=".118%" height="15" x="4.601%" y="165" fill="#D81425"/></g><g><title>liveness_and_intrinsic_checking (15,996,252 samples, 0.14%)</title><rect width=".14%" height="15" x="4.719%" y="149" fill="#CEBC27"/></g><g><title>check_mod_liveness (13,935,980 samples, 0.12%)</title><rect width=".122%" height="15" x="4.737%" y="133" fill="#D9CF0D"/></g><g><title>misc_checking_2 (46,889,373 samples, 0.41%)</title><rect width=".41%" height="15" x="4.719%" y="165" fill="#E74926"/></g><g><title>match_checking (30,890,300 samples, 0.27%)</title><rect width=".27%" height="15" x="4.859%" y="149" fill="#E1142E"/></g><g><title>check_match (30,051,172 samples, 0.26%)</title><rect width=".263%" height="15" x="4.866%" y="133" fill="#D21F29"/></g><g><title>lint_checking (20,451,292 samples, 0.18%)</title><rect width=".179%" height="15" x="5.21%" y="149" fill="#DDC82F"/></g><g><title>privacy_checking_modules (22,786,254 samples, 0.20%)</title><rect width=".199%" height="15" x="5.447%" y="149" fill="#E21A05"/></g><g><title>check_mod_privacy (22,745,555 samples, 0.20%)</title><rect width=".199%" height="15" x="5.448%" y="133" fill="#F9211A"/></g><g><title>misc_checking_3 (60,093,514 samples, 0.53%)</title><rect width=".525%" height="15" x="5.129%" y="165" fill="#EBB71C"/></g><g><title>adt_def (14,686,192 samples, 0.13%)</title><rect width=".128%" height="15" x="6.197%" y="53" fill="#DD0526"/></g><g><title>metadata_decode_entry (12,634,663 samples, 0.11%)</title><rect width=".11%" height="15" x="6.215%" y="37" fill="#F7122A"/></g><g><title>trait_impls_of (37,417,591 samples, 0.33%)</title><rect width=".327%" height="15" x="5.999%" y="101" fill="#F1832D"/></g><g><title>type_of (28,001,003 samples, 0.24%)</title><rect width=".245%" height="15" x="6.081%" y="85" fill="#F91F1D"/></g><g><title>metadata_decode_entry (22,442,529 samples, 0.20%)</title><rect width=".196%" height="15" x="6.13%" y="69" fill="#E16F35"/></g><g><title>coherent_trait (75,794,955 samples, 0.66%)</title><rect width=".662%" height="15" x="5.663%" y="133" fill="#EEA011"/></g><g><title>specialization_graph_of (72,652,346 samples, 0.64%)</title><rect width=".635%" height="15" x="5.691%" y="117" fill="#D69430"/></g><g><title>coherence_checking (76,837,763 samples, 0.67%)</title><rect width=".672%" height="15" x="5.663%" y="149" fill="#E82431"/></g><g><title>dropck_outlives (11,808,617 samples, 0.10%)</title><rect width=".103%" height="15" x="11.353%" y="101" fill="#D16718"/></g><g><title>evaluate_obligation (45,218,474 samples, 0.40%)</title><rect width=".395%" height="15" x="11.456%" y="101" fill="#E55808"/></g><g><title>method_autoderef_steps (12,329,102 samples, 0.11%)</title><rect width=".108%" height="15" x="11.952%" y="101" fill="#D5B513"/></g><g><title>item_bodies_checking (664,759,057 samples, 5.81%)</title><rect width="5.81%" height="15" x="6.355%" y="149" fill="#FEBF36"/><text x="6.605%" y="159.5">item_bo..</text></g><g><title>typeck_item_bodies (664,749,797 samples, 5.81%)</title><rect width="5.81%" height="15" x="6.355%" y="133" fill="#F15325"/><text x="6.605%" y="143.5">typeck_..</text></g><g><title>typeck_tables_of (662,584,947 samples, 5.79%)</title><rect width="5.791%" height="15" x="6.374%" y="117" fill="#E92427"/><text x="6.624%" y="127.5">typeck_..</text></g><g><title>evaluate_obligation (20,096,437 samples, 0.18%)</title><rect width=".176%" height="15" x="12.362%" y="101" fill="#E20336"/></g><g><title>item_types_checking (43,967,664 samples, 0.38%)</title><rect width=".384%" height="15" x="12.165%" y="149" fill="#F5C028"/></g><g><title>check_mod_item_types (43,893,073 samples, 0.38%)</title><rect width=".384%" height="15" x="12.166%" y="133" fill="#EEA71D"/></g><g><title>typeck_tables_of (26,688,100 samples, 0.23%)</title><rect width=".233%" height="15" x="12.316%" y="117" fill="#E8B633"/></g><g><title>generics_of (17,336,676 samples, 0.15%)</title><rect width=".151%" height="15" x="12.652%" y="117" fill="#E73C27"/></g><g><title>predicates_of (16,996,637 samples, 0.15%)</title><rect width=".149%" height="15" x="12.812%" y="117" fill="#D0450C"/></g><g><title>predicates_defined_on (11,983,303 samples, 0.10%)</title><rect width=".105%" height="15" x="12.856%" y="101" fill="#EB5D25"/></g><g><title>type_collecting (50,290,293 samples, 0.44%)</title><rect width=".44%" height="15" x="12.55%" y="149" fill="#D57427"/></g><g><title>collect_mod_item_types (50,209,680 samples, 0.44%)</title><rect width=".439%" height="15" x="12.551%" y="133" fill="#DECF1D"/></g><g><title>region_scope_tree (16,844,722 samples, 0.15%)</title><rect width=".147%" height="15" x="13.543%" y="117" fill="#CE601E"/></g><g><title>check_impl_item_well_formed (77,142,384 samples, 0.67%)</title><rect width=".674%" height="15" x="13.016%" y="133" fill="#DA8A04"/></g><g><title>check_item_well_formed (47,453,817 samples, 0.41%)</title><rect width=".415%" height="15" x="13.691%" y="133" fill="#FABF0E"/></g><g><title>analysis (1,616,260,722 samples, 14.13%)</title><rect width="14.127%" height="15" x=".01%" y="181" fill="#EF3C28"/><text x=".26%" y="191.5">analysis</text></g><g><title>type_check_crate (970,555,916 samples, 8.48%)</title><rect width="8.483%" height="15" x="5.654%" y="165" fill="#CE1B30"/><text x="5.904%" y="175.5">type_check_c..</text></g><g><title>wf_checking (130,771,210 samples, 1.14%)</title><rect width="1.143%" height="15" x="12.995%" y="149" fill="#E12308"/></g><g><title>const_caller_location (13,508,496 samples, 0.12%)</title><rect width=".118%" height="15" x="26.342%" y="149" fill="#FAD518"/></g><g><title>is_freeze_raw (36,630,109 samples, 0.32%)</title><rect width=".32%" height="15" x="26.521%" y="149" fill="#F77B16"/></g><g><title>evaluate_obligation (27,617,770 samples, 0.24%)</title><rect width=".241%" height="15" x="26.6%" y="133" fill="#E78A26"/></g><g><title>layout_raw (34,130,142 samples, 0.30%)</title><rect width=".298%" height="15" x="26.908%" y="149" fill="#E7912E"/></g><g><title>codegen_module (1,373,123,189 samples, 12.00%)</title><rect width="12.002%" height="15" x="15.357%" y="165" fill="#FB760B"/><text x="15.607%" y="175.5">codegen_module</text></g><g><title>incr_comp_encode_serialized_dep_graph (14,663,951 samples, 0.13%)</title><rect width=".128%" height="15" x="27.456%" y="117" fill="#D99319"/></g><g><title>incr_comp_persist_dep_graph (33,536,636 samples, 0.29%)</title><rect width=".293%" height="15" x="27.392%" y="149" fill="#F75125"/></g><g><title>incr_comp_encode_dep_graph (26,500,914 samples, 0.23%)</title><rect width=".232%" height="15" x="27.454%" y="133" fill="#D10C26"/></g><g><title>incr_comp_serialize_dep_graph (11,570,514 samples, 0.10%)</title><rect width=".101%" height="15" x="27.584%" y="117" fill="#E30109"/></g><g><title>encode_query_results (28,587,528 samples, 0.25%)</title><rect width=".25%" height="15" x="27.725%" y="117" fill="#F82F2B"/></g><g><title>serialize_dep_graph (66,773,928 samples, 0.58%)</title><rect width=".584%" height="15" x="27.392%" y="165" fill="#DD0A1E"/></g><g><title>incr_comp_persist_result_cache (33,163,498 samples, 0.29%)</title><rect width=".29%" height="15" x="27.685%" y="149" fill="#D2E501"/></g><g><title>incr_comp_serialize_result_cache (30,464,627 samples, 0.27%)</title><rect width=".266%" height="15" x="27.709%" y="133" fill="#DE9425"/></g><g><title>codegen_crate (1,583,096,052 samples, 13.84%)</title><rect width="13.837%" height="15" x="14.138%" y="181" fill="#EA4321"/><text x="14.388%" y="191.5">codegen_crate</text></g><g><title>LLVM_module_codegen_emit_obj (4,891,194,022 samples, 42.75%)</title><rect width="42.752%" height="15" x="31.551%" y="149" fill="#F76223"/><text x="31.801%" y="159.5">LLVM_module_codegen_emit_obj</text></g><g><title>LLVM_module_codegen (6,259,936,731 samples, 54.72%)</title><rect width="54.716%" height="15" x="27.985%" y="165" fill="#F78A34"/><text x="28.235%" y="175.5">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_make_bitcode (960,732,475 samples, 8.40%)</title><rect width="8.398%" height="15" x="74.303%" y="149" fill="#D54F1E"/><text x="74.553%" y="159.5">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_compressed_bitcode (174,167,805 samples, 1.52%)</title><rect width="1.522%" height="15" x="81.178%" y="133" fill="#F6B117"/></g><g><title>codegen_module_optimize (7,422,035,896 samples, 64.87%)</title><rect width="64.874%" height="15" x="27.976%" y="181" fill="#E63E1B"/><text x="28.226%" y="191.5">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,161,064,635 samples, 10.15%)</title><rect width="10.149%" height="15" x="82.701%" y="165" fill="#D89A08"/><text x="82.951%" y="175.5">LLVM_module_opt..</text></g><g><title>LLVM_module_optimize_module_passes (1,146,561,711 samples, 10.02%)</title><rect width="10.022%" height="15" x="82.827%" y="149" fill="#F4232D"/><text x="83.077%" y="159.5">LLVM_module_op..</text></g><g><title>macro_expand_crate (48,538,161 samples, 0.42%)</title><rect width=".424%" height="15" x="92.884%" y="165" fill="#FB730C"/></g><g><title>expand_crate (48,518,187 samples, 0.42%)</title><rect width=".424%" height="15" x="92.884%" y="149" fill="#F03632"/></g><g><title>configure_and_expand (82,431,245 samples, 0.72%)</title><rect width=".721%" height="15" x="92.849%" y="181" fill="#E95434"/></g><g><title>resolve_crate (25,377,918 samples, 0.22%)</title><rect width=".222%" height="15" x="93.348%" y="165" fill="#CF752F"/></g><g><title>build_hir_map (31,467,333 samples, 0.28%)</title><rect width=".275%" height="15" x="93.57%" y="165" fill="#F92B27"/></g><g><title>create_global_ctxt (35,287,114 samples, 0.31%)</title><rect width=".308%" height="15" x="93.57%" y="181" fill="#D1262C"/></g><g><title>free_global_ctxt (34,335,543 samples, 0.30%)</title><rect width=".3%" height="15" x="94.069%" y="181" fill="#ECD417"/></g><g><title>codegen_fulfill_obligation (45,192,642 samples, 0.40%)</title><rect width=".395%" height="15" x="95.119%" y="101" fill="#F24F15"/></g><g><title>needs_drop_raw (14,000,886 samples, 0.12%)</title><rect width=".122%" height="15" x="95.7%" y="101" fill="#D36023"/></g><g><title>metadata_decode_entry (17,139,726 samples, 0.15%)</title><rect width=".15%" height="15" x="97.269%" y="85" fill="#FDD728"/></g><g><title>optimized_mir (180,770,717 samples, 1.58%)</title><rect width="1.58%" height="15" x="95.866%" y="101" fill="#D35115"/></g><g><title>monomorphization_collector_graph_walk (343,999,688 samples, 3.01%)</title><rect width="3.007%" height="15" x="94.556%" y="117" fill="#D0BE26"/><text x="94.806%" y="127.5">mon..</text></g><g><title>monomorphization_collector (345,253,780 samples, 3.02%)</title><rect width="3.018%" height="15" x="94.556%" y="133" fill="#EBD526"/><text x="94.806%" y="143.5">mon..</text></g><g><title>assert_symbols_are_distinct (37,527,866 samples, 0.33%)</title><rect width=".328%" height="15" x="97.574%" y="117" fill="#ED7A26"/></g><g><title>symbol_name (30,513,088 samples, 0.27%)</title><rect width=".267%" height="15" x="97.635%" y="101" fill="#F4DA23"/></g><g><title>collect_and_partition_mono_items (400,143,006 samples, 3.50%)</title><rect width="3.498%" height="15" x="94.542%" y="149" fill="#F0442F"/><text x="94.792%" y="159.5">col..</text></g><g><title>partition_and_assert_distinct_symbols (53,314,159 samples, 0.47%)</title><rect width=".466%" height="15" x="97.574%" y="133" fill="#D21035"/></g><g><title>cgu_partitioning (15,765,770 samples, 0.14%)</title><rect width=".138%" height="15" x="97.902%" y="117" fill="#EB7C0C"/></g><g><title>exported_symbols (405,898,080 samples, 3.55%)</title><rect width="3.548%" height="15" x="94.513%" y="165" fill="#E0A90B"/><text x="94.763%" y="175.5">expo..</text></g><g><title>optimized_mir (21,097,420 samples, 0.18%)</title><rect width=".184%" height="15" x="98.083%" y="165" fill="#FAA602"/></g><g><title>generate_crate_metadata (447,315,859 samples, 3.91%)</title><rect width="3.91%" height="15" x="94.369%" y="181" fill="#F2D81D"/><text x="94.619%" y="191.5">gene..</text></g><g><title>hir_lowering (17,579,232 samples, 0.15%)</title><rect width=".154%" height="15" x="98.279%" y="181" fill="#E6741B"/></g><g><title>incr_comp_copy_cgu_workproducts (64,209,377 samples, 0.56%)</title><rect width=".561%" height="15" x="98.552%" y="149" fill="#E46330"/></g><g><title>finish_ongoing_codegen (64,223,943 samples, 0.56%)</title><rect width=".561%" height="15" x="98.552%" y="165" fill="#FD0B06"/></g><g><title>link_binary_remove_temps (26,234,888 samples, 0.23%)</title><rect width=".229%" height="15" x="99.137%" y="133" fill="#F78F27"/></g><g><title>link_crate (71,704,288 samples, 0.63%)</title><rect width=".627%" height="15" x="99.117%" y="165" fill="#EC610A"/></g><g><title>link_binary (71,700,171 samples, 0.63%)</title><rect width=".627%" height="15" x="99.117%" y="149" fill="#E9D013"/></g><g><title>link_rlib (43,213,260 samples, 0.38%)</title><rect width=".378%" height="15" x="99.366%" y="133" fill="#D8A402"/></g><g><title>link (149,682,085 samples, 1.31%)</title><rect width="1.308%" height="15" x="98.439%" y="181" fill="#DC8105"/></g><g><title>parse_crate (27,595,844 samples, 0.24%)</title><rect width=".241%" height="15" x="99.747%" y="181" fill="#F2110A"/></g><g><title>all (11,440,758,871 samples, 100%)</title><rect width="100%" height="15" x="0%" y="213" fill="#F26B00"/></g><g><title>rustc (11,440,758,871 samples, 100.00%)</title><rect width="100%" height="15" x="0%" y="197" fill="#FB1C1F"/><text x=".25%" y="207.5">rustc</text></g></svg></svg>